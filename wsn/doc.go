// Copyright 2015 Ollivier Robert for EUROCONTROL  All rights reserved

/*
  Package wsn implements the client-side part of the WS-N specification.

  WS-N (WebService Notifications) is an OASIS standard protocol for the publish-subscribe pattern,
  See https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern

  The complete WS-N specification can be found on the OASIS working group site at
  https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsn

  You will need to import both

      import (
          github.com/keltia/wsn-go/config
          github.com/keltia/wsn-go/wsn
      )

  You start by creating a client instance with your configuration as a parameter "config.Config",
  previously generated by calling "config.LoadConfig()" or manually.

      client := wsn.NewPushClient(config.Config)
  or
      client := wsn.NewPullClient(config.Config)

  Then you have to add each topic you are interested in getting data from:

      err := client.Subscribe("foo-topic")
      err := client.Subscribe("bar-topic")

  For both modes, the system is not started until you run

      client.Start()

  Both PullClient and PushClient supports the io.Reader interface which means that you can
  use all the usual io and iobuf methods like iobuf.ReadAll().

  To stop a given topic, use

      err := client.Unsubscribe(topic)

  To stop everything, use

      err := client.Stop()

  This will unsubscribe all the topics in one go (and in the Pull mode also destroy the Pull
  Point that was automatically created to manage the subscriptions).

  See https://github.com/keltia/surv-client-go for a running example client using `wsn-go`.

  BUGS

  traversing NAT services is not supported by the WS-N protocol as IP addresses & hostnames appear
  in the data stream in push mode.  You also have to ensure any firewall in-between allow traffic
  from/to the designated port.  Pull mode may work better in this case.

 */
package wsn
