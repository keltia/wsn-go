// pull_client.go

/*
  WS-N (Webservice Notifications) is an OASIS standard protocol for the publish-subscribe pattern,
  also called P/S, in either pushing or pulling.

  See the OASIS working group at https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsn
  for details.

  Client-side part of the WS-N package.  It supports Publish-Subscribe in Pull mode.

  You will need to import both

      import (
          github.com/keltia/wsn-go/config
          github.com/keltia/wsn-go/wsn
      )

  You start by creating a client instance with your configuration as a parameter "config.Config",
  previously generated by calling "config.LoadConfig()" or manually.

      client := wsn.NewPullClient(config.Config)

  Then you have to add each topic you are interested in getting data from:

      client.AddFeed("whatever")

  By default the output handler just prints every received packet on the console.  If you wish, you
  can either redirect on the command-line or better, use "-o FILE" to save it there:

      client.AddHandler(func([]byte))

  The handler is a func that takes a byte stream and do whatever you want it to do, including
  de-serialization or change of format.  It will be called automatically by the "pushing" callback.

  After the setup, you can subscribe to the given topics with:

      client.Subscribe(name, target)

  with two parameters, the topic name as key and the "push endpoint".  Adding feed is separated from
  subscribing because the latter effectively starts the data streams and need the server part to be
  started as well, which you do with "StartServer".

      client.StartServer()

  See https://github.com/keltia/surv-client-go for a running example client using `wsn-go`.

  BUGS

  traversing NAT services is not supported by the WS-N Push protocol as IP addresses & hostnames will
  appear in the data stream.  You also have to ensure any firewall in-between allow traffic from/to the
  designated port.

 */

package wsn

import (
	"github.com/keltia/wsn-go/config"
)

// Private functions

// Public interface

// Create new client instance
func NewPullClient(config *config.Config) (client *PullClient, err error) {
	client = new(PullClient)
	client.Topics	= make(map[string]*Topic, 10)
	client.Config	= config
	client.Target	= generateEndpoint(config)
	client.Feed_one = defaultFeed
	client.Timeout  = 0		// in seconds
	err = nil
	return
}